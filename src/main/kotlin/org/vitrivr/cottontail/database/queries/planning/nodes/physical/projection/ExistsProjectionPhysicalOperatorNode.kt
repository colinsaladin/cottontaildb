package org.vitrivr.cottontail.database.queries.planning.nodes.physical.projection

import org.vitrivr.cottontail.database.column.ColumnDef
import org.vitrivr.cottontail.database.queries.ColumnPair
import org.vitrivr.cottontail.database.queries.OperatorNode
import org.vitrivr.cottontail.database.queries.logical
import org.vitrivr.cottontail.database.queries.planning.cost.Cost
import org.vitrivr.cottontail.database.queries.planning.nodes.physical.UnaryPhysicalOperatorNode
import org.vitrivr.cottontail.database.queries.projection.Projection
import org.vitrivr.cottontail.execution.TransactionContext
import org.vitrivr.cottontail.execution.operators.projection.ExistsProjectionOperator
import org.vitrivr.cottontail.model.basics.Name
import org.vitrivr.cottontail.model.basics.Type

/**
 * A [UnaryPhysicalOperatorNode] that represents a projection operation involving aggregate functions such as [Projection.EXISTS].
 *
 * @author Ralph Gasser
 * @version 2.3.0
 */
class ExistsProjectionPhysicalOperatorNode(input: Physical? = null, val alias: Name.ColumnName? = null) : AbstractProjectionPhysicalOperatorNode(input, Projection.EXISTS) {

    /** The [ColumnDef] generated by this [ExistsProjectionPhysicalOperatorNode]. */
    override val columns: List<ColumnDef<*>>
        get() {
            val name = this.alias ?: (this.input?.columns?.first()?.name?.entity()?.column(Projection.EXISTS.label()) ?: Name.ColumnName(Projection.EXISTS.label()))
            return listOf(ColumnDef(name, Type.Boolean, false))
        }

    /** The [ColumnDef] required by this [ExistsProjectionPhysicalOperatorNode]. */
    override val requires: List<ColumnDef<*>>
        get() = emptyList()

    /** The output size of this [ExistsProjectionPhysicalOperatorNode] is always one. */
    override val outputSize: Long = 1

    /** The [Cost] of a [ExistsProjectionPhysicalOperatorNode]. */
    override val cost: Cost
        get() = Cost(cpu = Cost.COST_MEMORY_ACCESS)

    /**The [ExistsProjectionPhysicalOperatorNode] cannot be partitioned. */
    override val canBePartitioned: Boolean = false

    /**
     * Creates and returns a copy of this [ExistsProjectionPhysicalOperatorNode] without any children or parents.
     *
     * @return Copy of this [ExistsProjectionPhysicalOperatorNode].
     */
    override fun copy() = ExistsProjectionPhysicalOperatorNode(alias = this.alias)

    /**
     * Partitions this [ExistsProjectionPhysicalOperatorNode].
     *
     * @param p The number of partitions to create.
     * @return List of [OperatorNode.Physical], each representing a partition of the original tree.
     */
    override fun partition(p: Int): List<Physical> {
        throw UnsupportedOperationException("ExistsProjectionPhysicalOperatorNode cannot be partitioned.")
    }

    /**
     * Converts this [ExistsProjectionPhysicalOperatorNode] to a [ExistsProjectionOperator].
     *
     * @param ctx The [TransactionContext] used for the conversion (e.g. late binding).
     */
    override fun toOperator(ctx: org.vitrivr.cottontail.database.queries.QueryContext) = ExistsProjectionOperator(
        this.input?.toOperator(ctx) ?: throw IllegalStateException("Cannot convert disconnected OperatorNode to Operator (node = $this)")
    )

    /**
     * Compares this [ExistsProjectionPhysicalOperatorNode] to another object.
     *
     * @param other The other [Any] to compare this [ExistsProjectionPhysicalOperatorNode] to.
     * @return True if other equals this, false otherwise.
     */
    override fun equals(other: Any?): Boolean {
        if (this === other) return true
        if (other !is ExistsProjectionPhysicalOperatorNode) return false
        if (this.type != other.type) return false
        if (this.alias != other.alias) return false
        return true
    }

    /**
     * Generates and returns a hash code for this [ExistsProjectionPhysicalOperatorNode].
     */
    override fun hashCode(): Int {
        var result = this.type.hashCode()
        result = 31 * result + this.alias.hashCode()
        return result
    }
}